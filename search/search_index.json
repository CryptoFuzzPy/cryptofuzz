{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CryptoFuzz \u00b6 Installing & Quick Use \u00b6 Windows \u00b6 On Windows, you can install CryptoFuzz using the following pip command: pip install cryptofuzz Linux & Mac \u00b6 On Linux and macOS, you should use pip3 for installation: pip3 install cryptofuzz Git \u00b6 To use the latest version from the source, you can clone the CryptoFuzz repository: Clone the repository: git clone https://github.com/Pymmdrza/cryptofuzz Navigate to the cloned directory: cd cryptofuzz Install the package: Windows \u00b6 You can either run the install.bat or install command: ./install.bat # or ./install Linux & Mac \u00b6 On Linux and Mac, you can use the following commands to install: bash install.sh # or simply: ./install.sh Note: If you face any permission issues on Linux, make the script executable using: sudo chmod +x install.sh CLI \u00b6 generated and converted private key (hex) , bytes (seed), wif compressed and uncompressed and mnemonic , Root Key (xprv) , XPUB, Decimal (Number) , Public Key and Binary To Compressed and Uncompressed Bitcoin Address : Generated Option : --generate and -g Total Generated and convereted Key Option: --total , -t (integer/number type) Saved all Details and full information to JSON file (OutputFile.json) option --save and -s this example just generated 1000 key without save details # windows cryptofuzz --generate --total 1000 # linux & mac cryptofuzz --generate --total 1000 example Generated 1000 Key and saved to OutputFile.json : # windows cryptofuzz -g -t 1000 -s # linux & mac cryptofuzz --generate --total 1000 --save # or can use : -g -t 1000 -s Run this command anywhere in your system (in any Path folder) Saved OutputFile.json create with CryptoFuzz, you can see from the example section with the following cryptofuzz-example command in your terminal: Generated example Private Key From CLI cryptofuzz-example : \u00b6 all option command for windows cryptofuzz-example OPTION and Linux or Mac cryptofuzz-example OPTION : Generated private key (hex) & Converted : cryptofuzz-example privatekey Generated bytes & Converted : cryptofuzz-example bytes Generated mnemonic & Converted : cryptofuzz-example mnemonic Generated wif & Converted : cryptofuzz-example wif Generated binary & Converted : cryptofuzz-example binary Generated Root Key ( xprv ) & Converted : cryptofuzz-example xprv Generated decimal & Converted : cryptofuzz-example decimal Generated and Converted Private Key (HEX) To another cryptocurrency: - Generated Private Key (Hex) and Converted To Ethereum Address [Example command]: # windows cryptofuzz-example ethereum # linux and macOs: cryptofuzz-example ethereum Generated Private Key (Hex) and Converted To bitcoin Address [Example command]: # windows cryptofuzz-example bitcoin # linux and macOs: cryptofuzz-example bitcoin Generated Private Key (Hex) and Converted To dash Address [Example command]: # windows cryptofuzz-example dash # linux and macOs: cryptofuzz-example dash Generated Private Key (Hex) and Converted To dogecoin Address [Example command]: # windows cryptofuzz-example dogecoin # linux and macOs: cryptofuzz-example dogecoin Generated Private Key (Hex) and Converted To digibyte Address [Example command]: # windows cryptofuzz-example digibyte # linux and macOs: cryptofuzz-example digibyte Generated Private Key (Hex) and Converted To Bitcoin Gold Address [Example command]: # windows cryptofuzz-example bitcoingold # linux and macOs: cryptofuzz-example bitcoingold Generated Private Key (Hex) and Converted To qtum Address [Example command]: # windows cryptofuzz-example qtum # linux and macOs: cryptofuzz-example qtum Generated Private Key (Hex) and Converted To zcash Address [Example command]: # windows cryptofuzz-example zcash # linux and macOs: cryptofuzz-example zcash Generated Private Key (Hex) and Converted To Ravencoin Address [Example command]: # windows cryptofuzz-example rvn # linux and macOs: cryptofuzz-example rvn Generated Private Key (Hex) and Converted To Litecoin Address [Example command]: # windows cryptofuzz-example litecoin # linux and macOs: cryptofuzz-example litecoin Private Key \u00b6 generated random private key without repeat : from cryptofuzz import getPrivateKey Privatekey = getPrivateKey() Mnemonic \u00b6 Generated random mnemonic with standard size : from cryptofuzz import getMnemonic # default size 12 . can use [12, 18, 24] mnemonicString = getMnemonic(size=12) Bytes (seed) \u00b6 Generated Random Bytes Without Repeat : from cryptofuzz import getBytes byte = getBytes() Binary \u00b6 Generate Random Binary Without repeat 0/1 : from cryptofuzz import getBin binary_string = getBin(256) Private Key To Bytes \u00b6 from cryptofuzz import PrivateKey_To_Bytes privatekey = getPrivateKey() # Convert Private Key HEX To Bytes SEED byte = PrivateKey_To_Bytes(privatekey) Private Key To Wif \u00b6 generated private key (hex) and convert to wif compressed and uncompressed. from cryptofuzz import getPrivateKey, PrivateKey_To_Wif privatekey = getPrivateKey() # Convert Private key Hex To Wif # compressed wif_compress = PrivateKey_To_Wif(privatekey, compress=True) # wif Uncompressed wif_uncompress = PrivateKey_To_Wif(privatekey, compress=False) Private Key To Mnemonic \u00b6 from cryptofuzz import getPrivateKey, PrivateKey_To_Mnemonic privatekey = getPrivateKey() # convert private key [hex] To mnemonic mnemonic_string = PrivateKey_To_Mnemonics(privatekey) # for size mnemonic can use [12, 18, 24] Private Key To Binary \u00b6 from cryptofuzz import getPrivateKey, PrivateKey_To_Binary privatekey = getPrivateKey() # convert hex to bin binary_string = PrivateKey_To_Binary(privatekey) Private Key To Decimal (int) \u00b6 from cryptofuzz import getPrivateKey, PrivateKey_To_Decimal privatekey = getPrivateKey() # convert private key hex to number (dec) dec = PrivateKey_To_Decimal(privatekey) Private Key To Address \u00b6 convert private key Hex to Compress and Uncompress Address from cryptofuzz import getPrivateKey, PrivateKey_To_Wif privatekey = getPrivateKey() # convert private key to compress address compress_Address = PrivateKey_To_Address(privatekey, compress=True) # convert to uncompress address uncompress_Address = PrivateKey_To_Address(privatekey, compress=False) Private Key To Public Key \u00b6 generated private key and convert to public key compress and uncompress: from cryptofuzz import getPrivateKey, PrivateKey_To_PublicKey privatekey = getPrivateKey() # convert to public key uncompress public_uncompress = PrivateKey_To_PublicKey(privatekey) # convert private key hex to public key compress public_compress = PrivateKey_To_PublicKey(privatekey, compress=True) Bytes To Private Key \u00b6 from cryptofuzz import getBytes, Bytes_To_PrivateKey byte = getBytes() # convert bytes to hex (private key) privatekey = Bytes_To_PrivateKey(byte) Bytes To mnemonic \u00b6 convert bytes to mnemonic with default size=12 can use standard sizr: 12, 18, 24 from cryptofuzz import getBytes, Bytes_To_Mnemonic byte = getBytes() # Convert bytes to mnemonic with default size 12 mnemonic_words = Bytes_To_Mnemonic(byte) Bytes To Wif \u00b6 convert bytes To wif Compress and uncompress: from cryptofuzz import getBytes, Bytes_To_Wif byte = getBytes() # compress wif wif_compress = Bytes_To_Wif(byte, compress=True) #uncompress Wif wif_uncompress = Bytes_To_Wif(byte, compress=False) Bytes To Public Key \u00b6 convert bytes to public key compress and uncompress from cryptofuzz import getBytes, Bytes_To_PublicKey byte = getBytes() # compress Publickey Pub_compress = Bytes_To_PublicKey(byte, compress=True) #uncompress Wif Pub_uncompress = Bytes_To_PublicKey(byte, compress=False) Bytes to Dec (number) \u00b6 convert bytes to decimal number from cryptofuzz import getBytes, Bytes_To_Decimal byte = getBytes() #convert to integer dec = Bytes_To_Decimal(byte) Wif To Public Key \u00b6 convert wif to public key compress and uncompress from cryptofuzz import Wif_To_PublicKey wif = \"WIF_STRING_HERE\" pub_compress = Wif_To_PublicKey(wif, compress=True) pub_uncompress = Wif_To_PublicKey(wif, compress=False) Wif To Mnemonic \u00b6 convert Wif To Mnemonic With Default size=12 from cryptofuzz import Wif_To_Mnemonic wif = \"WIF_STRING_HERE\" mnemonic_string = Wif_To_Mnemonic(wif) Wif To Private Key: \u00b6 convert wif to private key (hex) from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" privatekey = convertor.wif_to_hex(wif_string) Wif To XPRV \u00b6 convert wif key to xprv (root key): from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # root key (xprv) xprv = convertor.wif_to_xprv(wif_string) Wif To Decimal (integer/number) \u00b6 convert wif key to decimal number : from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # dec dec = convertor.wif_to_int(wif_string) Wif To XPUB \u00b6 convert wif key to xpub (root public key): from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" #xpublic key xpub = convertor.wif_to_xpub(wif_string) Wif To Address \u00b6 convert wif key to compressed and uncompressed address from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # compress compress_address = convertor.wif_to_addr(wif_string, True) # uncompress uncompress_address = convertor.wif_to_addr(wif_string, False) Wif To Mnemonic \u00b6 convert wif key to mnemonic from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # mnemonic mnemonic_str = convertor.wif_to_mne(wif_string) Passphrase To Compress And Uncompress Address \u00b6 from cryptofuzz.Wallet import * passphrase = \"Mmdrza.com\" compress_address = Passphrase_To_Address(passphrase, True) uncompress_address = Passphrase_To_Address(passphrase, False) Generated XPRV and XPUB : \u00b6 from cryptofuzz.Wallet import * seed = getBytes() xprv = Bytes_To_XPRV(seed) xpub = Bytes_To_XPUB(seed) More example follow : Example contact \u00b6 Programmer & Owner : Mr. PyMmdrza Email : PyMmdrza@Gmail.Com Github: cryptofuzz/cryptofuzz Document: cryptofuzz Donate: \u00b6 Bitcoin (BTC): 1MMDRZA12xdBLD1P5AfEfvEMErp588vmF9 Ethereum & USDT (ERC20): 0x348e3C3b17784AafD7dB67d011b85F838F16E2D1 USDT & TRON (TRC20): TR4mA5quGVHGYS186HKDuArbD8SVssiZVx Litecoin (LTC): ltc1qtgvxc6na9pxvznu05yys3j5rq9ej6kahe2j50v","title":"Home"},{"location":"#cryptofuzz","text":"","title":"CryptoFuzz"},{"location":"#installing-quick-use","text":"","title":"Installing &amp; Quick Use"},{"location":"#windows","text":"On Windows, you can install CryptoFuzz using the following pip command: pip install cryptofuzz","title":"Windows"},{"location":"#linux-mac","text":"On Linux and macOS, you should use pip3 for installation: pip3 install cryptofuzz","title":"Linux &amp; Mac"},{"location":"#git","text":"To use the latest version from the source, you can clone the CryptoFuzz repository: Clone the repository: git clone https://github.com/Pymmdrza/cryptofuzz Navigate to the cloned directory: cd cryptofuzz Install the package:","title":"Git"},{"location":"#windows_1","text":"You can either run the install.bat or install command: ./install.bat # or ./install","title":"Windows"},{"location":"#linux-mac_1","text":"On Linux and Mac, you can use the following commands to install: bash install.sh # or simply: ./install.sh Note: If you face any permission issues on Linux, make the script executable using: sudo chmod +x install.sh","title":"Linux &amp; Mac"},{"location":"#cli","text":"generated and converted private key (hex) , bytes (seed), wif compressed and uncompressed and mnemonic , Root Key (xprv) , XPUB, Decimal (Number) , Public Key and Binary To Compressed and Uncompressed Bitcoin Address : Generated Option : --generate and -g Total Generated and convereted Key Option: --total , -t (integer/number type) Saved all Details and full information to JSON file (OutputFile.json) option --save and -s this example just generated 1000 key without save details # windows cryptofuzz --generate --total 1000 # linux & mac cryptofuzz --generate --total 1000 example Generated 1000 Key and saved to OutputFile.json : # windows cryptofuzz -g -t 1000 -s # linux & mac cryptofuzz --generate --total 1000 --save # or can use : -g -t 1000 -s Run this command anywhere in your system (in any Path folder) Saved OutputFile.json create with CryptoFuzz, you can see from the example section with the following cryptofuzz-example command in your terminal:","title":"CLI"},{"location":"#generated-example-private-key-from-cli-cryptofuzz-example","text":"all option command for windows cryptofuzz-example OPTION and Linux or Mac cryptofuzz-example OPTION : Generated private key (hex) & Converted : cryptofuzz-example privatekey Generated bytes & Converted : cryptofuzz-example bytes Generated mnemonic & Converted : cryptofuzz-example mnemonic Generated wif & Converted : cryptofuzz-example wif Generated binary & Converted : cryptofuzz-example binary Generated Root Key ( xprv ) & Converted : cryptofuzz-example xprv Generated decimal & Converted : cryptofuzz-example decimal Generated and Converted Private Key (HEX) To another cryptocurrency: - Generated Private Key (Hex) and Converted To Ethereum Address [Example command]: # windows cryptofuzz-example ethereum # linux and macOs: cryptofuzz-example ethereum Generated Private Key (Hex) and Converted To bitcoin Address [Example command]: # windows cryptofuzz-example bitcoin # linux and macOs: cryptofuzz-example bitcoin Generated Private Key (Hex) and Converted To dash Address [Example command]: # windows cryptofuzz-example dash # linux and macOs: cryptofuzz-example dash Generated Private Key (Hex) and Converted To dogecoin Address [Example command]: # windows cryptofuzz-example dogecoin # linux and macOs: cryptofuzz-example dogecoin Generated Private Key (Hex) and Converted To digibyte Address [Example command]: # windows cryptofuzz-example digibyte # linux and macOs: cryptofuzz-example digibyte Generated Private Key (Hex) and Converted To Bitcoin Gold Address [Example command]: # windows cryptofuzz-example bitcoingold # linux and macOs: cryptofuzz-example bitcoingold Generated Private Key (Hex) and Converted To qtum Address [Example command]: # windows cryptofuzz-example qtum # linux and macOs: cryptofuzz-example qtum Generated Private Key (Hex) and Converted To zcash Address [Example command]: # windows cryptofuzz-example zcash # linux and macOs: cryptofuzz-example zcash Generated Private Key (Hex) and Converted To Ravencoin Address [Example command]: # windows cryptofuzz-example rvn # linux and macOs: cryptofuzz-example rvn Generated Private Key (Hex) and Converted To Litecoin Address [Example command]: # windows cryptofuzz-example litecoin # linux and macOs: cryptofuzz-example litecoin","title":"Generated example Private Key From CLI cryptofuzz-example :"},{"location":"#private-key","text":"generated random private key without repeat : from cryptofuzz import getPrivateKey Privatekey = getPrivateKey()","title":"Private Key"},{"location":"#mnemonic","text":"Generated random mnemonic with standard size : from cryptofuzz import getMnemonic # default size 12 . can use [12, 18, 24] mnemonicString = getMnemonic(size=12)","title":"Mnemonic"},{"location":"#bytes-seed","text":"Generated Random Bytes Without Repeat : from cryptofuzz import getBytes byte = getBytes()","title":"Bytes (seed)"},{"location":"#binary","text":"Generate Random Binary Without repeat 0/1 : from cryptofuzz import getBin binary_string = getBin(256)","title":"Binary"},{"location":"#private-key-to-bytes","text":"from cryptofuzz import PrivateKey_To_Bytes privatekey = getPrivateKey() # Convert Private Key HEX To Bytes SEED byte = PrivateKey_To_Bytes(privatekey)","title":"Private Key To Bytes"},{"location":"#private-key-to-wif","text":"generated private key (hex) and convert to wif compressed and uncompressed. from cryptofuzz import getPrivateKey, PrivateKey_To_Wif privatekey = getPrivateKey() # Convert Private key Hex To Wif # compressed wif_compress = PrivateKey_To_Wif(privatekey, compress=True) # wif Uncompressed wif_uncompress = PrivateKey_To_Wif(privatekey, compress=False)","title":"Private Key To Wif"},{"location":"#private-key-to-mnemonic","text":"from cryptofuzz import getPrivateKey, PrivateKey_To_Mnemonic privatekey = getPrivateKey() # convert private key [hex] To mnemonic mnemonic_string = PrivateKey_To_Mnemonics(privatekey) # for size mnemonic can use [12, 18, 24]","title":"Private Key To Mnemonic"},{"location":"#private-key-to-binary","text":"from cryptofuzz import getPrivateKey, PrivateKey_To_Binary privatekey = getPrivateKey() # convert hex to bin binary_string = PrivateKey_To_Binary(privatekey)","title":"Private Key To Binary"},{"location":"#private-key-to-decimal-int","text":"from cryptofuzz import getPrivateKey, PrivateKey_To_Decimal privatekey = getPrivateKey() # convert private key hex to number (dec) dec = PrivateKey_To_Decimal(privatekey)","title":"Private Key To Decimal (int)"},{"location":"#private-key-to-address","text":"convert private key Hex to Compress and Uncompress Address from cryptofuzz import getPrivateKey, PrivateKey_To_Wif privatekey = getPrivateKey() # convert private key to compress address compress_Address = PrivateKey_To_Address(privatekey, compress=True) # convert to uncompress address uncompress_Address = PrivateKey_To_Address(privatekey, compress=False)","title":"Private Key To Address"},{"location":"#private-key-to-public-key","text":"generated private key and convert to public key compress and uncompress: from cryptofuzz import getPrivateKey, PrivateKey_To_PublicKey privatekey = getPrivateKey() # convert to public key uncompress public_uncompress = PrivateKey_To_PublicKey(privatekey) # convert private key hex to public key compress public_compress = PrivateKey_To_PublicKey(privatekey, compress=True)","title":"Private Key To Public Key"},{"location":"#bytes-to-private-key","text":"from cryptofuzz import getBytes, Bytes_To_PrivateKey byte = getBytes() # convert bytes to hex (private key) privatekey = Bytes_To_PrivateKey(byte)","title":"Bytes To Private Key"},{"location":"#bytes-to-mnemonic","text":"convert bytes to mnemonic with default size=12 can use standard sizr: 12, 18, 24 from cryptofuzz import getBytes, Bytes_To_Mnemonic byte = getBytes() # Convert bytes to mnemonic with default size 12 mnemonic_words = Bytes_To_Mnemonic(byte)","title":"Bytes To mnemonic"},{"location":"#bytes-to-wif","text":"convert bytes To wif Compress and uncompress: from cryptofuzz import getBytes, Bytes_To_Wif byte = getBytes() # compress wif wif_compress = Bytes_To_Wif(byte, compress=True) #uncompress Wif wif_uncompress = Bytes_To_Wif(byte, compress=False)","title":"Bytes To Wif"},{"location":"#bytes-to-public-key","text":"convert bytes to public key compress and uncompress from cryptofuzz import getBytes, Bytes_To_PublicKey byte = getBytes() # compress Publickey Pub_compress = Bytes_To_PublicKey(byte, compress=True) #uncompress Wif Pub_uncompress = Bytes_To_PublicKey(byte, compress=False)","title":"Bytes To Public Key"},{"location":"#bytes-to-dec-number","text":"convert bytes to decimal number from cryptofuzz import getBytes, Bytes_To_Decimal byte = getBytes() #convert to integer dec = Bytes_To_Decimal(byte)","title":"Bytes to Dec (number)"},{"location":"#wif-to-public-key","text":"convert wif to public key compress and uncompress from cryptofuzz import Wif_To_PublicKey wif = \"WIF_STRING_HERE\" pub_compress = Wif_To_PublicKey(wif, compress=True) pub_uncompress = Wif_To_PublicKey(wif, compress=False)","title":"Wif To Public Key"},{"location":"#wif-to-mnemonic","text":"convert Wif To Mnemonic With Default size=12 from cryptofuzz import Wif_To_Mnemonic wif = \"WIF_STRING_HERE\" mnemonic_string = Wif_To_Mnemonic(wif)","title":"Wif To Mnemonic"},{"location":"#wif-to-private-key","text":"convert wif to private key (hex) from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" privatekey = convertor.wif_to_hex(wif_string)","title":"Wif To Private Key:"},{"location":"#wif-to-xprv","text":"convert wif key to xprv (root key): from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # root key (xprv) xprv = convertor.wif_to_xprv(wif_string)","title":"Wif To XPRV"},{"location":"#wif-to-decimal-integernumber","text":"convert wif key to decimal number : from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # dec dec = convertor.wif_to_int(wif_string)","title":"Wif To Decimal (integer/number)"},{"location":"#wif-to-xpub","text":"convert wif key to xpub (root public key): from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" #xpublic key xpub = convertor.wif_to_xpub(wif_string)","title":"Wif To XPUB"},{"location":"#wif-to-address","text":"convert wif key to compressed and uncompressed address from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # compress compress_address = convertor.wif_to_addr(wif_string, True) # uncompress uncompress_address = convertor.wif_to_addr(wif_string, False)","title":"Wif To Address"},{"location":"#wif-to-mnemonic_1","text":"convert wif key to mnemonic from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # mnemonic mnemonic_str = convertor.wif_to_mne(wif_string)","title":"Wif To Mnemonic"},{"location":"#passphrase-to-compress-and-uncompress-address","text":"from cryptofuzz.Wallet import * passphrase = \"Mmdrza.com\" compress_address = Passphrase_To_Address(passphrase, True) uncompress_address = Passphrase_To_Address(passphrase, False)","title":"Passphrase To Compress And Uncompress Address"},{"location":"#generated-xprv-and-xpub","text":"from cryptofuzz.Wallet import * seed = getBytes() xprv = Bytes_To_XPRV(seed) xpub = Bytes_To_XPUB(seed) More example follow : Example","title":"Generated XPRV and XPUB :"},{"location":"#contact","text":"Programmer & Owner : Mr. PyMmdrza Email : PyMmdrza@Gmail.Com Github: cryptofuzz/cryptofuzz Document: cryptofuzz","title":"contact"},{"location":"#donate","text":"Bitcoin (BTC): 1MMDRZA12xdBLD1P5AfEfvEMErp588vmF9 Ethereum & USDT (ERC20): 0x348e3C3b17784AafD7dB67d011b85F838F16E2D1 USDT & TRON (TRC20): TR4mA5quGVHGYS186HKDuArbD8SVssiZVx Litecoin (LTC): ltc1qtgvxc6na9pxvznu05yys3j5rq9ej6kahe2j50v","title":"Donate:"},{"location":"readme/","text":"CryptoFuzz \u00b6 Installing & Quick Use \u00b6 Windows \u00b6 On Windows, you can install CryptoFuzz using the following pip command: pip install cryptofuzz Linux & Mac \u00b6 On Linux and macOS, you should use pip3 for installation: pip3 install cryptofuzz Git \u00b6 To use the latest version from the source, you can clone the CryptoFuzz repository: Clone the repository: git clone https://github.com/Pymmdrza/cryptofuzz Navigate to the cloned directory: cd cryptofuzz Install the package: Windows \u00b6 You can either run the install.bat or install command: ./install.bat # or ./install Linux & Mac \u00b6 On Linux and Mac, you can use the following commands to install: bash install.sh # or simply: ./install.sh Note: If you face any permission issues on Linux, make the script executable using: sudo chmod +x install.sh CLI \u00b6 generated and converted private key (hex) , bytes (seed), wif compressed and uncompressed and mnemonic , Root Key (xprv) , XPUB, Decimal (Number) , Public Key and Binary To Compressed and Uncompressed Bitcoin Address : Generated Option : --generate and -g Total Generated and convereted Key Option: --total , -t (integer/number type) Saved all Details and full information to JSON file (OutputFile.json) option --save and -s this example just generated 1000 key without save details # windows cryptofuzz --generate --total 1000 # linux & mac cryptofuzz --generate --total 1000 example Generated 1000 Key and saved to OutputFile.json : # windows cryptofuzz -g -t 1000 -s # linux & mac cryptofuzz --generate --total 1000 --save # or can use : -g -t 1000 -s Run this command anywhere in your system (in any Path folder) Saved OutputFile.json create with CryptoFuzz, you can see from the example section with the following cryptofuzz-example command in your terminal: Generated example Private Key From CLI cryptofuzz-example : \u00b6 all option command for windows cryptofuzz-example OPTION and Linux or Mac cryptofuzz-example OPTION : Generated private key (hex) & Converted : cryptofuzz-example privatekey Generated bytes & Converted : cryptofuzz-example bytes Generated mnemonic & Converted : cryptofuzz-example mnemonic Generated wif & Converted : cryptofuzz-example wif Generated binary & Converted : cryptofuzz-example binary Generated Root Key ( xprv ) & Converted : cryptofuzz-example xprv Generated decimal & Converted : cryptofuzz-example decimal Generated and Converted Private Key (HEX) To another cryptocurrency: - Generated Private Key (Hex) and Converted To Ethereum Address [Example command]: # windows cryptofuzz-example ethereum # linux and macOs: cryptofuzz-example ethereum Generated Private Key (Hex) and Converted To bitcoin Address [Example command]: # windows cryptofuzz-example bitcoin # linux and macOs: cryptofuzz-example bitcoin Generated Private Key (Hex) and Converted To dash Address [Example command]: # windows cryptofuzz-example dash # linux and macOs: cryptofuzz-example dash Generated Private Key (Hex) and Converted To dogecoin Address [Example command]: # windows cryptofuzz-example dogecoin # linux and macOs: cryptofuzz-example dogecoin Generated Private Key (Hex) and Converted To digibyte Address [Example command]: # windows cryptofuzz-example digibyte # linux and macOs: cryptofuzz-example digibyte Generated Private Key (Hex) and Converted To Bitcoin Gold Address [Example command]: # windows cryptofuzz-example bitcoingold # linux and macOs: cryptofuzz-example bitcoingold Generated Private Key (Hex) and Converted To qtum Address [Example command]: # windows cryptofuzz-example qtum # linux and macOs: cryptofuzz-example qtum Generated Private Key (Hex) and Converted To zcash Address [Example command]: # windows cryptofuzz-example zcash # linux and macOs: cryptofuzz-example zcash Generated Private Key (Hex) and Converted To Ravencoin Address [Example command]: # windows cryptofuzz-example rvn # linux and macOs: cryptofuzz-example rvn Generated Private Key (Hex) and Converted To Litecoin Address [Example command]: # windows cryptofuzz-example litecoin # linux and macOs: cryptofuzz-example litecoin Private Key \u00b6 generated random private key without repeat : from cryptofuzz import getPrivateKey Privatekey = getPrivateKey() Mnemonic \u00b6 Generated random mnemonic with standard size : from cryptofuzz import getMnemonic # default size 12 . can use [12, 18, 24] mnemonicString = getMnemonic(size=12) Bytes (seed) \u00b6 Generated Random Bytes Without Repeat : from cryptofuzz import getBytes byte = getBytes() Binary \u00b6 Generate Random Binary Without repeat 0/1 : from cryptofuzz import getBin binary_string = getBin(256) Private Key To Bytes \u00b6 from cryptofuzz import PrivateKey_To_Bytes privatekey = getPrivateKey() # Convert Private Key HEX To Bytes SEED byte = PrivateKey_To_Bytes(privatekey) Private Key To Wif \u00b6 generated private key (hex) and convert to wif compressed and uncompressed. from cryptofuzz import getPrivateKey, PrivateKey_To_Wif privatekey = getPrivateKey() # Convert Private key Hex To Wif # compressed wif_compress = PrivateKey_To_Wif(privatekey, compress=True) # wif Uncompressed wif_uncompress = PrivateKey_To_Wif(privatekey, compress=False) Private Key To Mnemonic \u00b6 from cryptofuzz import getPrivateKey, PrivateKey_To_Mnemonic privatekey = getPrivateKey() # convert private key [hex] To mnemonic mnemonic_string = PrivateKey_To_Mnemonics(privatekey) # for size mnemonic can use [12, 18, 24] Private Key To Binary \u00b6 from cryptofuzz import getPrivateKey, PrivateKey_To_Binary privatekey = getPrivateKey() # convert hex to bin binary_string = PrivateKey_To_Binary(privatekey) Private Key To Decimal (int) \u00b6 from cryptofuzz import getPrivateKey, PrivateKey_To_Decimal privatekey = getPrivateKey() # convert private key hex to number (dec) dec = PrivateKey_To_Decimal(privatekey) Private Key To Address \u00b6 convert private key Hex to Compress and Uncompress Address from cryptofuzz import getPrivateKey, PrivateKey_To_Wif privatekey = getPrivateKey() # convert private key to compress address compress_Address = PrivateKey_To_Address(privatekey, compress=True) # convert to uncompress address uncompress_Address = PrivateKey_To_Address(privatekey, compress=False) Private Key To Public Key \u00b6 generated private key and convert to public key compress and uncompress: from cryptofuzz import getPrivateKey, PrivateKey_To_PublicKey privatekey = getPrivateKey() # convert to public key uncompress public_uncompress = PrivateKey_To_PublicKey(privatekey) # convert private key hex to public key compress public_compress = PrivateKey_To_PublicKey(privatekey, compress=True) Bytes To Private Key \u00b6 from cryptofuzz import getBytes, Bytes_To_PrivateKey byte = getBytes() # convert bytes to hex (private key) privatekey = Bytes_To_PrivateKey(byte) Bytes To mnemonic \u00b6 convert bytes to mnemonic with default size=12 can use standard sizr: 12, 18, 24 from cryptofuzz import getBytes, Bytes_To_Mnemonic byte = getBytes() # Convert bytes to mnemonic with default size 12 mnemonic_words = Bytes_To_Mnemonic(byte) Bytes To Wif \u00b6 convert bytes To wif Compress and uncompress: from cryptofuzz import getBytes, Bytes_To_Wif byte = getBytes() # compress wif wif_compress = Bytes_To_Wif(byte, compress=True) #uncompress Wif wif_uncompress = Bytes_To_Wif(byte, compress=False) Bytes To Public Key \u00b6 convert bytes to public key compress and uncompress from cryptofuzz import getBytes, Bytes_To_PublicKey byte = getBytes() # compress Publickey Pub_compress = Bytes_To_PublicKey(byte, compress=True) #uncompress Wif Pub_uncompress = Bytes_To_PublicKey(byte, compress=False) Bytes to Dec (number) \u00b6 convert bytes to decimal number from cryptofuzz import getBytes, Bytes_To_Decimal byte = getBytes() #convert to integer dec = Bytes_To_Decimal(byte) Wif To Public Key \u00b6 convert wif to public key compress and uncompress from cryptofuzz import Wif_To_PublicKey wif = \"WIF_STRING_HERE\" pub_compress = Wif_To_PublicKey(wif, compress=True) pub_uncompress = Wif_To_PublicKey(wif, compress=False) Wif To Mnemonic \u00b6 convert Wif To Mnemonic With Default size=12 from cryptofuzz import Wif_To_Mnemonic wif = \"WIF_STRING_HERE\" mnemonic_string = Wif_To_Mnemonic(wif) Wif To Private Key: \u00b6 convert wif to private key (hex) from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" privatekey = convertor.wif_to_hex(wif_string) Wif To XPRV \u00b6 convert wif key to xprv (root key): from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # root key (xprv) xprv = convertor.wif_to_xprv(wif_string) Wif To Decimal (integer/number) \u00b6 convert wif key to decimal number : from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # dec dec = convertor.wif_to_int(wif_string) Wif To XPUB \u00b6 convert wif key to xpub (root public key): from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" #xpublic key xpub = convertor.wif_to_xpub(wif_string) Wif To Address \u00b6 convert wif key to compressed and uncompressed address from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # compress compress_address = convertor.wif_to_addr(wif_string, True) # uncompress uncompress_address = convertor.wif_to_addr(wif_string, False) Wif To Mnemonic \u00b6 convert wif key to mnemonic from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # mnemonic mnemonic_str = convertor.wif_to_mne(wif_string) Passphrase To Compress And Uncompress Address \u00b6 from cryptofuzz.Wallet import * passphrase = \"Mmdrza.com\" compress_address = Passphrase_To_Address(passphrase, True) uncompress_address = Passphrase_To_Address(passphrase, False) Generated XPRV and XPUB : \u00b6 from cryptofuzz.Wallet import * seed = getBytes() xprv = Bytes_To_XPRV(seed) xpub = Bytes_To_XPUB(seed) More example follow : Example contact \u00b6 Programmer & Owner : Mr. PyMmdrza Email : PyMmdrza@Gmail.Com Github: cryptofuzz/cryptofuzz Document: cryptofuzz Donate: \u00b6 Bitcoin (BTC): 1MMDRZA12xdBLD1P5AfEfvEMErp588vmF9 Ethereum & USDT (ERC20): 0x348e3C3b17784AafD7dB67d011b85F838F16E2D1 USDT & TRON (TRC20): TR4mA5quGVHGYS186HKDuArbD8SVssiZVx Litecoin (LTC): ltc1qtgvxc6na9pxvznu05yys3j5rq9ej6kahe2j50v","title":"Readme"},{"location":"readme/#cryptofuzz","text":"","title":"CryptoFuzz"},{"location":"readme/#installing-quick-use","text":"","title":"Installing &amp; Quick Use"},{"location":"readme/#windows","text":"On Windows, you can install CryptoFuzz using the following pip command: pip install cryptofuzz","title":"Windows"},{"location":"readme/#linux-mac","text":"On Linux and macOS, you should use pip3 for installation: pip3 install cryptofuzz","title":"Linux &amp; Mac"},{"location":"readme/#git","text":"To use the latest version from the source, you can clone the CryptoFuzz repository: Clone the repository: git clone https://github.com/Pymmdrza/cryptofuzz Navigate to the cloned directory: cd cryptofuzz Install the package:","title":"Git"},{"location":"readme/#windows_1","text":"You can either run the install.bat or install command: ./install.bat # or ./install","title":"Windows"},{"location":"readme/#linux-mac_1","text":"On Linux and Mac, you can use the following commands to install: bash install.sh # or simply: ./install.sh Note: If you face any permission issues on Linux, make the script executable using: sudo chmod +x install.sh","title":"Linux &amp; Mac"},{"location":"readme/#cli","text":"generated and converted private key (hex) , bytes (seed), wif compressed and uncompressed and mnemonic , Root Key (xprv) , XPUB, Decimal (Number) , Public Key and Binary To Compressed and Uncompressed Bitcoin Address : Generated Option : --generate and -g Total Generated and convereted Key Option: --total , -t (integer/number type) Saved all Details and full information to JSON file (OutputFile.json) option --save and -s this example just generated 1000 key without save details # windows cryptofuzz --generate --total 1000 # linux & mac cryptofuzz --generate --total 1000 example Generated 1000 Key and saved to OutputFile.json : # windows cryptofuzz -g -t 1000 -s # linux & mac cryptofuzz --generate --total 1000 --save # or can use : -g -t 1000 -s Run this command anywhere in your system (in any Path folder) Saved OutputFile.json create with CryptoFuzz, you can see from the example section with the following cryptofuzz-example command in your terminal:","title":"CLI"},{"location":"readme/#generated-example-private-key-from-cli-cryptofuzz-example","text":"all option command for windows cryptofuzz-example OPTION and Linux or Mac cryptofuzz-example OPTION : Generated private key (hex) & Converted : cryptofuzz-example privatekey Generated bytes & Converted : cryptofuzz-example bytes Generated mnemonic & Converted : cryptofuzz-example mnemonic Generated wif & Converted : cryptofuzz-example wif Generated binary & Converted : cryptofuzz-example binary Generated Root Key ( xprv ) & Converted : cryptofuzz-example xprv Generated decimal & Converted : cryptofuzz-example decimal Generated and Converted Private Key (HEX) To another cryptocurrency: - Generated Private Key (Hex) and Converted To Ethereum Address [Example command]: # windows cryptofuzz-example ethereum # linux and macOs: cryptofuzz-example ethereum Generated Private Key (Hex) and Converted To bitcoin Address [Example command]: # windows cryptofuzz-example bitcoin # linux and macOs: cryptofuzz-example bitcoin Generated Private Key (Hex) and Converted To dash Address [Example command]: # windows cryptofuzz-example dash # linux and macOs: cryptofuzz-example dash Generated Private Key (Hex) and Converted To dogecoin Address [Example command]: # windows cryptofuzz-example dogecoin # linux and macOs: cryptofuzz-example dogecoin Generated Private Key (Hex) and Converted To digibyte Address [Example command]: # windows cryptofuzz-example digibyte # linux and macOs: cryptofuzz-example digibyte Generated Private Key (Hex) and Converted To Bitcoin Gold Address [Example command]: # windows cryptofuzz-example bitcoingold # linux and macOs: cryptofuzz-example bitcoingold Generated Private Key (Hex) and Converted To qtum Address [Example command]: # windows cryptofuzz-example qtum # linux and macOs: cryptofuzz-example qtum Generated Private Key (Hex) and Converted To zcash Address [Example command]: # windows cryptofuzz-example zcash # linux and macOs: cryptofuzz-example zcash Generated Private Key (Hex) and Converted To Ravencoin Address [Example command]: # windows cryptofuzz-example rvn # linux and macOs: cryptofuzz-example rvn Generated Private Key (Hex) and Converted To Litecoin Address [Example command]: # windows cryptofuzz-example litecoin # linux and macOs: cryptofuzz-example litecoin","title":"Generated example Private Key From CLI cryptofuzz-example :"},{"location":"readme/#private-key","text":"generated random private key without repeat : from cryptofuzz import getPrivateKey Privatekey = getPrivateKey()","title":"Private Key"},{"location":"readme/#mnemonic","text":"Generated random mnemonic with standard size : from cryptofuzz import getMnemonic # default size 12 . can use [12, 18, 24] mnemonicString = getMnemonic(size=12)","title":"Mnemonic"},{"location":"readme/#bytes-seed","text":"Generated Random Bytes Without Repeat : from cryptofuzz import getBytes byte = getBytes()","title":"Bytes (seed)"},{"location":"readme/#binary","text":"Generate Random Binary Without repeat 0/1 : from cryptofuzz import getBin binary_string = getBin(256)","title":"Binary"},{"location":"readme/#private-key-to-bytes","text":"from cryptofuzz import PrivateKey_To_Bytes privatekey = getPrivateKey() # Convert Private Key HEX To Bytes SEED byte = PrivateKey_To_Bytes(privatekey)","title":"Private Key To Bytes"},{"location":"readme/#private-key-to-wif","text":"generated private key (hex) and convert to wif compressed and uncompressed. from cryptofuzz import getPrivateKey, PrivateKey_To_Wif privatekey = getPrivateKey() # Convert Private key Hex To Wif # compressed wif_compress = PrivateKey_To_Wif(privatekey, compress=True) # wif Uncompressed wif_uncompress = PrivateKey_To_Wif(privatekey, compress=False)","title":"Private Key To Wif"},{"location":"readme/#private-key-to-mnemonic","text":"from cryptofuzz import getPrivateKey, PrivateKey_To_Mnemonic privatekey = getPrivateKey() # convert private key [hex] To mnemonic mnemonic_string = PrivateKey_To_Mnemonics(privatekey) # for size mnemonic can use [12, 18, 24]","title":"Private Key To Mnemonic"},{"location":"readme/#private-key-to-binary","text":"from cryptofuzz import getPrivateKey, PrivateKey_To_Binary privatekey = getPrivateKey() # convert hex to bin binary_string = PrivateKey_To_Binary(privatekey)","title":"Private Key To Binary"},{"location":"readme/#private-key-to-decimal-int","text":"from cryptofuzz import getPrivateKey, PrivateKey_To_Decimal privatekey = getPrivateKey() # convert private key hex to number (dec) dec = PrivateKey_To_Decimal(privatekey)","title":"Private Key To Decimal (int)"},{"location":"readme/#private-key-to-address","text":"convert private key Hex to Compress and Uncompress Address from cryptofuzz import getPrivateKey, PrivateKey_To_Wif privatekey = getPrivateKey() # convert private key to compress address compress_Address = PrivateKey_To_Address(privatekey, compress=True) # convert to uncompress address uncompress_Address = PrivateKey_To_Address(privatekey, compress=False)","title":"Private Key To Address"},{"location":"readme/#private-key-to-public-key","text":"generated private key and convert to public key compress and uncompress: from cryptofuzz import getPrivateKey, PrivateKey_To_PublicKey privatekey = getPrivateKey() # convert to public key uncompress public_uncompress = PrivateKey_To_PublicKey(privatekey) # convert private key hex to public key compress public_compress = PrivateKey_To_PublicKey(privatekey, compress=True)","title":"Private Key To Public Key"},{"location":"readme/#bytes-to-private-key","text":"from cryptofuzz import getBytes, Bytes_To_PrivateKey byte = getBytes() # convert bytes to hex (private key) privatekey = Bytes_To_PrivateKey(byte)","title":"Bytes To Private Key"},{"location":"readme/#bytes-to-mnemonic","text":"convert bytes to mnemonic with default size=12 can use standard sizr: 12, 18, 24 from cryptofuzz import getBytes, Bytes_To_Mnemonic byte = getBytes() # Convert bytes to mnemonic with default size 12 mnemonic_words = Bytes_To_Mnemonic(byte)","title":"Bytes To mnemonic"},{"location":"readme/#bytes-to-wif","text":"convert bytes To wif Compress and uncompress: from cryptofuzz import getBytes, Bytes_To_Wif byte = getBytes() # compress wif wif_compress = Bytes_To_Wif(byte, compress=True) #uncompress Wif wif_uncompress = Bytes_To_Wif(byte, compress=False)","title":"Bytes To Wif"},{"location":"readme/#bytes-to-public-key","text":"convert bytes to public key compress and uncompress from cryptofuzz import getBytes, Bytes_To_PublicKey byte = getBytes() # compress Publickey Pub_compress = Bytes_To_PublicKey(byte, compress=True) #uncompress Wif Pub_uncompress = Bytes_To_PublicKey(byte, compress=False)","title":"Bytes To Public Key"},{"location":"readme/#bytes-to-dec-number","text":"convert bytes to decimal number from cryptofuzz import getBytes, Bytes_To_Decimal byte = getBytes() #convert to integer dec = Bytes_To_Decimal(byte)","title":"Bytes to Dec (number)"},{"location":"readme/#wif-to-public-key","text":"convert wif to public key compress and uncompress from cryptofuzz import Wif_To_PublicKey wif = \"WIF_STRING_HERE\" pub_compress = Wif_To_PublicKey(wif, compress=True) pub_uncompress = Wif_To_PublicKey(wif, compress=False)","title":"Wif To Public Key"},{"location":"readme/#wif-to-mnemonic","text":"convert Wif To Mnemonic With Default size=12 from cryptofuzz import Wif_To_Mnemonic wif = \"WIF_STRING_HERE\" mnemonic_string = Wif_To_Mnemonic(wif)","title":"Wif To Mnemonic"},{"location":"readme/#wif-to-private-key","text":"convert wif to private key (hex) from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" privatekey = convertor.wif_to_hex(wif_string)","title":"Wif To Private Key:"},{"location":"readme/#wif-to-xprv","text":"convert wif key to xprv (root key): from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # root key (xprv) xprv = convertor.wif_to_xprv(wif_string)","title":"Wif To XPRV"},{"location":"readme/#wif-to-decimal-integernumber","text":"convert wif key to decimal number : from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # dec dec = convertor.wif_to_int(wif_string)","title":"Wif To Decimal (integer/number)"},{"location":"readme/#wif-to-xpub","text":"convert wif key to xpub (root public key): from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" #xpublic key xpub = convertor.wif_to_xpub(wif_string)","title":"Wif To XPUB"},{"location":"readme/#wif-to-address","text":"convert wif key to compressed and uncompressed address from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # compress compress_address = convertor.wif_to_addr(wif_string, True) # uncompress uncompress_address = convertor.wif_to_addr(wif_string, False)","title":"Wif To Address"},{"location":"readme/#wif-to-mnemonic_1","text":"convert wif key to mnemonic from cryptofuzz import Convertor convertor = Convertor() wif_string = \"WIF_KEY_COMPRESS_OR_UNCOMPRESS\" # mnemonic mnemonic_str = convertor.wif_to_mne(wif_string)","title":"Wif To Mnemonic"},{"location":"readme/#passphrase-to-compress-and-uncompress-address","text":"from cryptofuzz.Wallet import * passphrase = \"Mmdrza.com\" compress_address = Passphrase_To_Address(passphrase, True) uncompress_address = Passphrase_To_Address(passphrase, False)","title":"Passphrase To Compress And Uncompress Address"},{"location":"readme/#generated-xprv-and-xpub","text":"from cryptofuzz.Wallet import * seed = getBytes() xprv = Bytes_To_XPRV(seed) xpub = Bytes_To_XPUB(seed) More example follow : Example","title":"Generated XPRV and XPUB :"},{"location":"readme/#contact","text":"Programmer & Owner : Mr. PyMmdrza Email : PyMmdrza@Gmail.Com Github: cryptofuzz/cryptofuzz Document: cryptofuzz","title":"contact"},{"location":"readme/#donate","text":"Bitcoin (BTC): 1MMDRZA12xdBLD1P5AfEfvEMErp588vmF9 Ethereum & USDT (ERC20): 0x348e3C3b17784AafD7dB67d011b85F838F16E2D1 USDT & TRON (TRC20): TR4mA5quGVHGYS186HKDuArbD8SVssiZVx Litecoin (LTC): ltc1qtgvxc6na9pxvznu05yys3j5rq9ej6kahe2j50v","title":"Donate:"},{"location":"css/readme/","text":"cryptofuzz \u00b6 /css/","title":"Readme"},{"location":"css/readme/#cryptofuzz","text":"/css/","title":"cryptofuzz"},{"location":"css/fonts/readme/","text":"/css/fonts/","title":"Readme"},{"location":"img/readme/","text":"/img/","title":"Readme"},{"location":"js/readme/","text":"/js/","title":"Readme"},{"location":"search/readme/","text":"/search/","title":"Readme"}]}